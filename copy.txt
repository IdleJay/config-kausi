const express = require('express');
const { MongoClient } = require('mongodb');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');

const app = express();
const port = 3000;

const uri = 'mongodb://localhost:27017/applicant';

app.use(bodyParser.urlencoded({ extended: true }));

async function findUser(username) {
  const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

  try {
    await client.connect();

    const database = client.db('applicant');
    const collection = database.collection('info');

    return collection.findOne({ username });
  } finally {
    await client.close();
  }
}

async function comparePasswords(plainPassword, hashedPassword) {
  return await bcrypt.compare(plainPassword, hashedPassword);
}

app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await findUser(username);

    if (!user) {
      return res.status(401).send('Invalid username or password');
    }

    const passwordMatch = await comparePasswords(password, user.password);

    if (!passwordMatch) {
      return res.status(401).send('Invalid username or password');
    }

    // You may want to generate and return a token for authenticated users here

    res.send('Login successful!');
  } catch (error) {
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
});

app.listen(port, () => {
  console.log(Server is running on port 6000);
});

========================================================================



display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-left: 400px;
  margin-right: 800px;